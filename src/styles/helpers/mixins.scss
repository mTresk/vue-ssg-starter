@use 'sass:math';

@function rem($px) {
  @return math.div($px, 16) + rem;
}

@function em($px, $current: 16) {
  @return math.div($px, $current) + em;
}

@function fluid($max: 100, $min: 10) {
  $maxViewportWidth: $maxWidth;
  $minViewportWidth: $minWidth;
  $maxSize: math.div($max, 16);
  $minSize: math.div($min, 16);
  $maxWidth: math.div($maxViewportWidth, 16);
  $minWidth: math.div($minViewportWidth, 16);
  $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
  $yAxisIntersection: -$minWidth * $slope + $minSize;

  @return clamp(#{$minSize * 1rem}, #{$yAxisIntersection * 1rem} + #{$slope * 100vw}, #{$maxSize * 1rem});
}

@mixin adaptive-value($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
  @if $startSize == 0 {
    $startSize: 0.0001;
  }

  @if $minSize == 0 {
    $minSize: 0.0001;
  }

  $addSize: math.div($startSize - $minSize, 16);

  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    $widthFrom: $maxWidth;
  }

  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if $yIntersection == 0 {
    $yIntersection: 0.0001;
  }

  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

  @if $minSize > $startSize {
    $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
  }

  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: rem($startSize);
    }
  }

  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }

    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) /
          #{math.div($widthFrom, 16) - math.div($widthTo, 16)}
      );
    }
  }

  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: rem($minSize);
    }
  }
}

@mixin image() {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@mixin hide-scroll() {
  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin responsive-video() {
  position: relative;
  aspect-ratio: 16/9;
  overflow: hidden;

  video,
  iframe,
  object,
  embed {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin visually-hidden {
  position: absolute !important;
  width: rem(1) !important;
  height: rem(1) !important;
  padding: 0 !important;
  margin: rem(-1) !important;
  overflow: hidden !important;
  white-space: nowrap !important;
  border: 0 !important;
  clip-path: inset(100%) !important;
}

@mixin showmore {
  [data-showmore-button] {
    span {
      &:last-child {
        display: none;
      }

      ._showmore-active & {
        display: none;

        &:last-child {
          display: flex;
        }
      }
    }
  }
}
